.\" Automatically generated by Pod::Man 2.26 (Pod::Simple 3.23)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Azantek::Reports 3"
.TH WWW::Azantek::Reports 3 "2012-08-28" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Azantek \- class to assist in interacting with Azantek user interface
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 0.05
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The module lets the user interact with Azanteks useristrative web interface.
This can be used for automating tasks of processing data exports etc.
.PP
.Vb 1
\&    use WWW::Azantek;
\&
\&    #All mandatory parameters
\&    #Please note Azantek can be configured to use authorization on IP
\&    #meaning authentication is unnessesary
\&    my $wd = WWW::Azantek\->new({
\&        url => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&    });
\&
\&    #With optional authentication credentials
\&    my $wd = WWW::Azantek\->new({
\&        username => \*(Aqtopshop\*(Aq,
\&        password => \*(Aqtopsecret\*(Aq,
\&        url => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&    });
\&
\&    #with verbosity enabled
\&    my $wd = WWW::Azantek\->new({
\&        username => \*(Aqtopshop\*(Aq,
\&        password => \*(Aqtopsecret\*(Aq,
\&        url      => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&        verbose  => 1,
\&    });
\&
\&    #With caching
\&    my $wd = WWW::Azantek\->new({
\&        username => \*(Aqtopshop\*(Aq,
\&        password => \*(Aqtopsecret\*(Aq,
\&        url      => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&        cache    => 1,
\&    });
\&
\&
\&    #With custom WWW::Mechanize object
\&    use WWW::Mechanize;
\&
\&    my $mech = WWW::Mechanize\->new(agent => \*(AqMEGAnice bot\*(Aq);
\&
\&    my $wd = WWW::Azantek\->new({
\&        username => \*(Aqtopshop\*(Aq,
\&        password => \*(Aqtopsecret\*(Aq,
\&        url      => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&        mech     => $mech,
\&    });
\&    
\&    
\&    #The intended use
\&    package My::WWW::Azantek::Subclass;
\&    
\&    sub processor {
\&        my ( $self, $content ) = @_;
\&        
\&        #Note the lines terminations are Windows CRLF
\&        my @lines = split /\er\en/, $$content;
\&        
\&        ...
\&        
\&        }
\&    }
\&    
\&    
\&    #Using your new class
\&    my $my = My::WWW::Azantek::Subclass\->new({
\&        username => \*(Aqtopshop\*(Aq,
\&        password => \*(Aqtopsecret\*(Aq,
\&        url      => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&    });
\&    
\&    my $content = $my\->retrieve();
\&    
\&    print $$content;
\&
\&
\&    #Using a processor implemented as a code reference
\&    $wd = WWW::Azantek\->new({
\&        username  => \*(Aqtopshop\*(Aq,
\&        password  => \*(Aqtopsecret\*(Aq,
\&        url       => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&        processor => sub {                
\&            ${$_[0]} =~ s/test/fest/;        
\&            return $_[0];
\&        },
\&    });    
\&
\&
\&    #Implementing a processor class
\&    my $processor = MY::Processor\->new();
\&    
\&    UNIVERSAL::can($processor, \*(Aqprocess\*(Aq);
\&    
\&    $wd = WWW::Azantek\->new({
\&        username  => \*(Aqtopshop\*(Aq,
\&        password  => \*(Aqtopsecret\*(Aq,
\&        url       => \*(Aqhttp://www.billigespil.dk/user/edbpriser\-export.asp\*(Aq,
\&        processor => $processor,
\&    });
\&    
\&    my $content = $wd\->retrieve();
\&    
\&    print ${$content};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a simple wrapper around WWW::Mechanize it assists the user
in getting going with automating tasks related to the Azantek useristrative
web interface.
.PP
Such as:
.IP "\(bu" 4
manipulating data exports (removing, adjusting, calculating, adding
columns)
.IP "\(bu" 4
filling in missing data (combining data)
.IP "\(bu" 4
converting formats (from \s-1CSV\s0 to \s-1XML\s0, \s-1JSON\s0, \s-1CSV\s0, whatever)
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This is the constructor.
.PP
The constructor takes a hash reference as input. The hash reference should
contain keys according to the following conventions:
.IP "\(bu" 4
username, optional username credential to access Azantek
.IP "\(bu" 4
password, optional password credential to access Azantek
.IP "\(bu" 4
url, the mandatory \s-1URL\s0 to retrieve data from (\*(L"retrieve\*(R")
.IP "\(bu" 4
mech, a WWW::Mechanize object if you have a pre instantiated object
or some other object implementing the the same \s-1API\s0 as WWW::Mechanize.
.Sp
The parameter is optional.
.Sp
See also cache parameter below for an example.
.IP "\(bu" 4
verbose, a flag for indicating verbosity, default is 0 (disabled), the
parameter is optional
.IP "\(bu" 4
cache, usage of a cache meaning that we internally use
WWW::Mechanize::Cached instead of WWW::Mechanize.
.Sp
The parameter is optional
.IP "\(bu" 4
processor
.Sp
This parameter can be used of you do not want to implement a subclass of
WWW::Azantek.
.Sp
The processor parameter can either be:
.RS 4
.IP "\(bu" 4
an object implementing a \*(L"proces\*(R" method, with the following profile:
.Sp
.Vb 1
\&    proces(\e$content);
.Ve
.IP "\(bu" 4
a code reference with the same profile, adhering to the following example:
.Sp
.Vb 1
\&    sub { return ${$_[0]} };
.Ve
.RE
.RS 4
.RE
.SS "retrieve"
.IX Subsection "retrieve"
Parameters:
.IP "\(bu" 4
a hash reference, the reference can be populated with statistic
information based on the lineprocessing (\*(L"processor\*(R") initiated from
\&\*(L"retrieve\*(R".
.PP
The method returns a scalar reference to a string containing the content
retrieved from the \s-1URL\s0 provided to the contructor (\*(L"new\*(R"). If the
\&\*(L"processor\*(R" method is overwritten you can manipulate the content prior
to being returned.
.SS "process"
.IX Subsection "process"
Takes the content retrieved (see: \*(L"retrieve\*(R") from the \s-1URL\s0 parameter provided
to the constructor (see: \*(L"new\*(R"). You can overwrite the behaviour via the
constructor (see: \*(L"new\*(R").
.PP
Parameters:
.IP "\(bu" 4
a scalar reference to a string to be processed line by line
.PP
The stub does however not do anything, but it returns the scalar reference
\&\fIuntouched\fR.
.SS "processor"
.IX Subsection "processor"
This is a wrapper for \*(L"process\*(R", provided for backwards compatibility.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "\(bu" 4
Unable to authenticate, username and password not valid credentials
.IP "\(bu" 4
Both username and password is required for authentication
.Sp
If you want to use authentication you have to provide both \fBusername\fR and
\&\fBpassword\fR.
.IP "\(bu" 4
Unable to retrieve base \s-1URL:\s0 $@
.Sp
The base \s-1URL\s0 provided to retrieve gives an error.
.Sp
Please see: <http://search.cpan.org/perldoc?HTTP%3A%3AResponse> or
<http://search.cpan.org/~gaas/libwww\-perl/lib/HTTP/Status.pm>
.Sp
Test the \s-1URL\s0 in your browser to investigate.
.IP "\(bu" 4
Unable to retrieve \s-1URL:\s0 $@
.Sp
The base \s-1URL\s0 provided to retrieve gives an error.
.Sp
Please see: <http://search.cpan.org/perldoc?HTTP%3A%3AResponse> or
<http://search.cpan.org/~gaas/libwww\-perl/lib/HTTP/Status.pm>
.Sp
Test the \s-1URL\s0 in your browser to investigate.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
The module requires Internet access to make sense and an account with Azantek
with username and password is required.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.IP "\(bu" 4
WWW::Mechanize
.IP "\(bu" 4
Carp
.SH "TEST AND QUALITY"
.IX Header "TEST AND QUALITY"
The tests are based on Test::MockObject::Extends and example data are
mocked dummy data. Please see the \s-1TODO\s0 section.
.PP
The test suite uses the following environment variables as flags:
.IP "\s-1TEST_AUTHOR\s0, to test prerequisites, using Test::Prereq" 4
.IX Item "TEST_AUTHOR, to test prerequisites, using Test::Prereq"
.PD 0
.IP "\s-1TEST_CRITIC\s0, to do a static analysis of the code, using Perl::Critic, see also \s-1QUALITY\s0 \s-1AND\s0 \s-1CODING\s0 \s-1STANDARD\s0" 4
.IX Item "TEST_CRITIC, to do a static analysis of the code, using Perl::Critic, see also QUALITY AND CODING STANDARD"
.PD
.SS "\s-1TEST\s0 \s-1COVERAGE\s0"
.IX Subsection "TEST COVERAGE"
The following data are based on an analysis created using Devel::Cover and
the distributions own test suite, instantiated the following way.
.PP
.Vb 1
\&    % ./Build testcover \-\-verbose
.Ve
.PP
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-
File                           stmt   bran   cond    sub    pod   time  total
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-
blib/lib/WWW/Azantek.pm     100.0  100.0  100.0  100.0  100.0  100.0  100.0
Total                         100.0  100.0  100.0  100.0  100.0  100.0  100.0
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\- \-\-\-\-\-\-
.PP
Please note the report is based on version 0.03 of WWW::Azantek
.SH "QUALITY AND CODING STANDARD"
.IX Header "QUALITY AND CODING STANDARD"
The code passes Perl::Critic tests a severity: 1 (brutal)
.PP
The following policies have been disabled:
.IP "Perl::Critic::Policy::InputOutput::RequireBracedFileHandleWithPrint" 4
.IX Item "Perl::Critic::Policy::InputOutput::RequireBracedFileHandleWithPrint"
.PP
Perl::Critic resource file, can be located in the t/ directory of the
distribution \fIt/perlcriticrc\fR
.PP
Perl::Tidy resource file, can be obtained from the original author
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No known bugs at this time.
.SH "BUG REPORTING"
.IX Header "BUG REPORTING"
Please report any bugs or feature requests via:
.IP "\(bu" 4
email: \f(CW\*(C`bug\-www\-dandomain at rt.cpan.org\*(C'\fR
.IP "\(bu" 4
\&\s-1HTTP:\s0 <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=WWW\-Azantek>
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
.IP "\(bu" 4
Subversion repository: <http://logicLAB.jira.com/svn/DAND>
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Most of the work is done in the classes inheriting from this class,
there could however be work to do in the maintenance area, making this class
more informative if failing
.IP "\(bu" 4
I would like to add some integration test scripts so I can see that the
package works with real data apart from the mock.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
<http://www.dandomain.dk>
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::Azantek
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
Official Wiki
.Sp
<http://logiclab.jira.com/wiki/display/DAND/Home+\-+WWW\-Azantek>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/WWW\-Azantek>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/WWW\-Azantek>
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=WWW\-Azantek>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/WWW\-Azantek>
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "\(bu" 4
jonasbn, \f(CW\*(C`<jonasbn at cpan.org>\*(C'\fR
.SH "MOTIVATION"
.IX Header "MOTIVATION"
This module grew out of a small script using WWW::Mechanize to fetch some
data from a website and changing it to satisfy the client utilizing the data.
.PP
More a more scripts where based on the original script giving a lot of redundant
code. Finally I refactored the lot to use some common code base.
.PP
After some time I refactored to an object oriented structure making it even
easier to maintain and adding more clients. This made the actual connectivity
into a package (this package) letting it loose as open source.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.IP "\(bu" 4
Andy Lester (petdance) the author of WWW::Mechanize and
WWW::Mechanize:Cached, this module makes easy things easy and hard things
possible.
.IP "\(bu" 4
Steen Schnack, who understand the power and flexibility of computer
programming and custom solutions and who gave me the assignment.
.IP "\(bu" 4
Slaven Rezic, for his \s-1CPAN\s0 testers work and assistance in pointing out
an issue with release 0.03
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2009\-2010 jonasbn, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
